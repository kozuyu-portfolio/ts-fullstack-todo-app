// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { AppControllerGetHelloData, AuthControllerSignupData, AuthControllerSignupResponse, AuthControllerSigninData, AuthControllerSigninResponse, AuthControllerRefreshData, AuthControllerRefreshResponse, AuthControllerSignoutData, TaskControllerFindAllData, TaskControllerFindAllResponse, TaskControllerCreateData, TaskControllerCreateResponse, TaskControllerRemoveData, TaskControllerRemoveResponse, TaskControllerFindOneData, TaskControllerFindOneResponse, TaskControllerUpdateData, TaskControllerUpdateResponse, AttachmentControllerCreateData, AttachmentControllerCreateResponse, AttachmentControllerGetDownloadUrlData, AttachmentControllerGetDownloadUrlResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const authControllerSignup = <ThrowOnError extends boolean = false>(options: Options<AuthControllerSignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerSignupResponse, unknown, ThrowOnError>({
        url: '/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authControllerSignin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerSigninData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerSigninResponse, unknown, ThrowOnError>({
        url: '/auth/signin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authControllerRefresh = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthControllerRefreshResponse, unknown, ThrowOnError>({
        url: '/auth/refresh',
        ...options
    });
};

export const authControllerSignout = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerSignoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/auth/signout',
        ...options
    });
};

export const taskControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<TaskControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TaskControllerFindAllResponse, unknown, ThrowOnError>({
        url: '/tasks',
        ...options
    });
};

export const taskControllerCreate = <ThrowOnError extends boolean = false>(options: Options<TaskControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskControllerCreateResponse, unknown, ThrowOnError>({
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const taskControllerRemove = <ThrowOnError extends boolean = false>(options: Options<TaskControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TaskControllerRemoveResponse, unknown, ThrowOnError>({
        url: '/tasks/{id}',
        ...options
    });
};

export const taskControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<TaskControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TaskControllerFindOneResponse, unknown, ThrowOnError>({
        url: '/tasks/{id}',
        ...options
    });
};

export const taskControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<TaskControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TaskControllerUpdateResponse, unknown, ThrowOnError>({
        url: '/tasks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const attachmentControllerCreate = <ThrowOnError extends boolean = false>(options: Options<AttachmentControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachmentControllerCreateResponse, unknown, ThrowOnError>({
        url: '/attachments/create/{taskId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const attachmentControllerGetDownloadUrl = <ThrowOnError extends boolean = false>(options: Options<AttachmentControllerGetDownloadUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AttachmentControllerGetDownloadUrlResponse, unknown, ThrowOnError>({
        url: '/attachments/{attachmentId}',
        ...options
    });
};