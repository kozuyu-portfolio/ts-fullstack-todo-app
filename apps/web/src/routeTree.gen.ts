/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as PublicSignupImport } from './routes/_public/signup'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as ProtectedTasksIndexImport } from './routes/_protected/tasks/index'
import { Route as ProtectedTasksTaskIdImport } from './routes/_protected/tasks/$taskId'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicSignupRoute = PublicSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const ProtectedTasksIndexRoute = ProtectedTasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedTasksTaskIdRoute = ProtectedTasksTaskIdImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/signup': {
      id: '/_public/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicSignupImport
      parentRoute: typeof PublicImport
    }
    '/_protected/tasks/$taskId': {
      id: '/_protected/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof ProtectedTasksTaskIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/tasks/': {
      id: '/_protected/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof ProtectedTasksIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedTasksTaskIdRoute: typeof ProtectedTasksTaskIdRoute
  ProtectedTasksIndexRoute: typeof ProtectedTasksIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedTasksTaskIdRoute: ProtectedTasksTaskIdRoute,
  ProtectedTasksIndexRoute: ProtectedTasksIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicSignupRoute: typeof PublicSignupRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicSignupRoute: PublicSignupRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/login': typeof PublicLoginRoute
  '/signup': typeof PublicSignupRoute
  '/tasks/$taskId': typeof ProtectedTasksTaskIdRoute
  '/tasks': typeof ProtectedTasksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/login': typeof PublicLoginRoute
  '/signup': typeof PublicSignupRoute
  '/tasks/$taskId': typeof ProtectedTasksTaskIdRoute
  '/tasks': typeof ProtectedTasksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/login': typeof PublicLoginRoute
  '/_public/signup': typeof PublicSignupRoute
  '/_protected/tasks/$taskId': typeof ProtectedTasksTaskIdRoute
  '/_protected/tasks/': typeof ProtectedTasksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/signup' | '/tasks/$taskId' | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/signup' | '/tasks/$taskId' | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_public/login'
    | '/_public/signup'
    | '/_protected/tasks/$taskId'
    | '/_protected/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/tasks/$taskId",
        "/_protected/tasks/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login",
        "/_public/signup"
      ]
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/signup": {
      "filePath": "_public/signup.tsx",
      "parent": "/_public"
    },
    "/_protected/tasks/$taskId": {
      "filePath": "_protected/tasks/$taskId.tsx",
      "parent": "/_protected"
    },
    "/_protected/tasks/": {
      "filePath": "_protected/tasks/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
